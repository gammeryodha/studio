'use client';

import { useState, useTransition, useEffect, useRef } from 'react';
import { useFormState, useFormStatus } from 'react-dom';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert } from '@/components/ui/alert';
import { Bot, Loader2, Sparkles, Wand2, Youtube } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import type { SuggestVideoImprovementsOutput } from '@/ai/flows/suggest-video-improvements';
import type { GenerateVideoOutput } from '@/ai/flows/generate-video-from-text';
import { generateVideoAction, suggestImprovementsAction } from './actions';

function SubmitButton({ children, ...props }: React.ComponentProps<typeof Button>) {
  const { pending } = useFormStatus();
  return (
    <Button {...props} type="submit" disabled={pending}>
      {pending ? <Loader2 className="mr-2 animate-spin" /> : <Sparkles />}
      {children}
    </Button>
  );
}

export default function DashboardPage() {
  const { toast } = useToast();
  const [video, setVideo] = useState<GenerateVideoOutput | null>(null);
  const [videoMeta, setVideoMeta] = useState({ title: '', description: '', tags: '' });
  const [suggestions, setSuggestions] = useState<SuggestVideoImprovementsOutput | null>(null);
  const [isSuggesting, startSuggestionTransition] = useTransition();
  const suggestionsRef = useRef<HTMLDivElement>(null);

  const [generateState, formAction] = useFormState(generateVideoAction, {
    error: undefined,
    data: undefined,
  });

  useEffect(() => {
    if (generateState.error) {
      toast({
        variant: 'destructive',
        title: 'Video Generation Failed',
        description: generateState.error,
      });
    }
    if (generateState.data) {
      setVideo(generateState.data);
      setSuggestions(null); // Reset suggestions for new video
      setVideoMeta({
        title: 'My Awesome AI Video',
        description: 'A new video generated by NeonVid.',
        tags: 'ai, video, generative art',
      });
    }
  }, [generateState, toast]);

  const handleGetSuggestions = () => {
    if (!video?.videoDataUri) return;

    startSuggestionTransition(async () => {
      const result = await suggestImprovementsAction({
        videoDataUri: video.videoDataUri,
        ...videoMeta
      });
      if (result.error) {
        toast({
          variant: 'destructive',
          title: 'Optimization Failed',
          description: result.error,
        });
      } else if (result.data) {
        setSuggestions(result.data);
        setTimeout(() => suggestionsRef.current?.scrollIntoView({ behavior: 'smooth' }), 100);
      }
    });
  };

  return (
    <div className="container mx-auto max-w-7xl">
      <div className="grid grid-cols-1 gap-8 lg:grid-cols-2 xl:grid-cols-5">
        <div className="space-y-8 xl:col-span-2">
          <Card className="shadow-lg shadow-primary/10">
            <CardHeader>
              <CardTitle className="font-headline flex items-center gap-2 text-2xl">
                <Sparkles className="h-6 w-6 text-primary" />
                Create Your Video
              </CardTitle>
              <CardDescription>
                Describe the video you want to create. Be as specific as possible for the best results.
              </CardDescription>
            </CardHeader>
            <form action={formAction}>
              <CardContent>
                <Textarea
                  name="prompt"
                  placeholder="e.g., A cinematic shot of a futuristic city at night, with flying cars and neon signs."
                  className="min-h-[120px] text-base"
                  required
                />
              </CardContent>
              <CardFooter>
                <SubmitButton className="w-full" size="lg">
                  Generate Video
                </SubmitButton>
              </CardFooter>
            </form>
          </Card>
          {suggestions && (
            <div ref={suggestionsRef}>
              <Card className="shadow-lg shadow-accent/10">
                <CardHeader>
                  <CardTitle className="font-headline flex items-center gap-2 text-2xl">
                    <Bot className="h-6 w-6 text-accent" />
                    AI Suggestions
                  </CardTitle>
                  <CardDescription>
                    Here are some AI-powered suggestions to improve your video's reach and engagement.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4 text-sm">
                  <div>
                    <Label className="font-semibold text-accent">Title</Label>
                    <p className="rounded-md border bg-muted/50 p-2">{suggestions.suggestedTitle}</p>
                  </div>
                  <div>
                    <Label className="font-semibold text-accent">Description</Label>
                    <p className="rounded-md border bg-muted/50 p-2 whitespace-pre-wrap">{suggestions.suggestedDescription}</p>
                  </div>
                  <div>
                    <Label className="font-semibold text-accent">Tags</Label>
                    <p className="rounded-md border bg-muted/50 p-2">{suggestions.suggestedTags}</p>
                  </div>
                  <div>
                    <Label className="font-semibold text-accent">Edits</Label>
                    <p className="rounded-md border bg-muted/50 p-2 whitespace-pre-wrap">{suggestions.suggestedEdits}</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>

        <div className="space-y-6 xl:col-span-3">
          {useFormStatus().pending && !video && (
            <div className="flex aspect-video w-full items-center justify-center rounded-lg border-2 border-dashed">
                <div className="text-center text-muted-foreground">
                    <Loader2 className="mx-auto h-12 w-12 animate-spin text-primary" />
                    <p className="mt-4 text-lg">Generating your video...</p>
                    <p className="text-sm">This may take a minute. Please don't close this window.</p>
                </div>
            </div>
          )}
          {video && (
            <Card className="overflow-hidden">
                <div className="aspect-video bg-black">
                    <video key={video.videoDataUri} src={video.videoDataUri} controls className="h-full w-full" />
                </div>
                <CardContent className="p-4 space-y-4">
                    <div className="space-y-2">
                        <Label htmlFor="title">Video Title</Label>
                        <Input id="title" value={videoMeta.title} onChange={(e) => setVideoMeta({...videoMeta, title: e.target.value})} />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="description">Description</Label>
                        <Textarea id="description" value={videoMeta.description} onChange={(e) => setVideoMeta({...videoMeta, description: e.target.value})} />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="tags">Tags (comma-separated)</Label>
                        <Input id="tags" value={videoMeta.tags} onChange={(e) => setVideoMeta({...videoMeta, tags: e.target.value})} />
                    </div>
                </CardContent>
                <CardFooter className="flex flex-col gap-2 sm:flex-row">
                    <Button className="w-full" onClick={handleGetSuggestions} disabled={isSuggesting}>
                        {isSuggesting ? <Loader2 className="mr-2 animate-spin" /> : <Wand2 />}
                        Get AI Suggestions
                    </Button>
                     <Button variant="destructive" className="w-full bg-red-600 hover:bg-red-700">
                        <Youtube />
                        Publish to YouTube
                    </Button>
                </CardFooter>
            </Card>
          )}
           {!useFormStatus().pending && !video && (
            <div className="flex aspect-video w-full items-center justify-center rounded-lg border-2 border-dashed">
              <div className="text-center text-muted-foreground">
                <p>Your generated video will appear here.</p>
                <p className="text-sm">Start by entering a prompt.</p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
